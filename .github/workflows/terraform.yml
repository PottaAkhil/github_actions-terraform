name: Terraform Deploy

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select Terraform action for manual jobs'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

##########################
# VPC Jobs
##########################
jobs:



  vpc-auto:
    runs-on: ubuntu-latest
    outputs:
      vpc-changed: ${{ steps.detect.outputs.vpc }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes in VPC
        id: detect
        uses: dorny/paths-filter@v3
        with:
          filters: |
            vpc:
              - 'vpc/**'

      - name: Configure AWS credentials
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1




      - name: Setup Terraform
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        working-directory: ./vpc
        run: terraform init

      - name: Terraform Format
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        working-directory: ./vpc
        run: terraform fmt -recursive

      - name: Terraform Validate
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        working-directory: ./vpc
        run: terraform validate






      - name: Terraform Plan
        if: ${{ steps.detect.outputs.vpc == 'true' }}
        working-directory: ./vpc
        run: terraform plan -input=false -var-file=terraform.tfvars







  vpc-manual:
    runs-on: ubuntu-latest
    needs: vpc-auto
    if: ${{ needs.vpc-auto.outputs.vpc-changed == 'true' }}
    environment: terraform-approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        working-directory: ./vpc
        run: terraform init

      - name: Select Action
        id: action
        run: |
          # Use workflow input if available, otherwise fallback to environment secret
          ACTION="${{ github.event.inputs.action || secrets.TERRAFORM_ACTION }}"
          echo "Selected action: $ACTION"
          echo "action=$ACTION" >> $GITHUB_OUTPUT





      - name: Terraform Apply or Destroy
        working-directory: ./vpc
        run: |
          if [ "${{ steps.action.outputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ steps.action.outputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1
          fi

##########################
# SG Jobs
##########################
  sg-auto:
    runs-on: ubuntu-latest
    outputs:
      sg-changed: ${{ steps.detect.outputs.sg }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes in SG
        id: detect
        uses: dorny/paths-filter@v3
        with:
          filters: |
            sg:
              - 'sg/**'

      - name: Configure AWS credentials
        if: ${{ steps.detect.outputs.sg == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        if: ${{ steps.detect.outputs.sg == 'true' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        if: ${{ steps.detect.outputs.sg == 'true' }}
        working-directory: ./sg
        run: terraform init

      - name: Terraform Format
        if: ${{ steps.detect.outputs.sg == 'true' }}
        working-directory: ./sg
        run: terraform fmt -recursive

      - name: Terraform Validate
        if: ${{ steps.detect.outputs.sg == 'true' }}
        working-directory: ./sg
        run: terraform validate

      - name: Terraform Plan
        if: ${{ steps.detect.outputs.sg == 'true' }}
        working-directory: ./sg
        run: terraform plan -input=false -var-file=terraform.tfvars

  sg-manual:
    runs-on: ubuntu-latest
    needs: sg-auto
    if: ${{ needs.sg-auto.outputs.sg-changed == 'true' }}
    environment: terraform-approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        working-directory: ./sg
        run: terraform init

      - name: Select Action
        id: action
        run: |
          ACTION="${{ github.event.inputs.action || secrets.TERRAFORM_ACTION }}"
          echo "Selected action: $ACTION"
          echo "action=$ACTION" >> $GITHUB_OUTPUT

      - name: Terraform Apply or Destroy
        working-directory: ./sg
        run: |
          if [ "${{ steps.action.outputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ steps.action.outputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1
          fi

##########################
# EC2 Jobs
##########################
  ec2-auto:
    runs-on: ubuntu-latest
    outputs:
      ec2-changed: ${{ steps.detect.outputs.ec2 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes in EC2
        id: detect
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ec2:
              - 'ec2/**'

      - name: Configure AWS credentials
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        working-directory: ./ec2
        run: terraform init

      - name: Terraform Format
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        working-directory: ./ec2
        run: terraform fmt -recursive

      - name: Terraform Validate
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        working-directory: ./ec2
        run: terraform validate

      - name: Terraform Plan
        if: ${{ steps.detect.outputs.ec2 == 'true' }}
        working-directory: ./ec2
        run: terraform plan -input=false -var-file=terraform.tfvars

  ec2-manual:
    runs-on: ubuntu-latest
    needs: ec2-auto
    if: ${{ needs.ec2-auto.outputs.ec2-changed == 'true' }}
    environment: terraform-approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        working-directory: ./ec2
        run: terraform init

      - name: Select Action
        id: action
        run: |
          ACTION="${{ github.event.inputs.action || secrets.TERRAFORM_ACTION }}"
          echo "Selected action: $ACTION"
          echo "action=$ACTION" >> $GITHUB_OUTPUT

      - name: Terraform Apply or Destroy
        working-directory: ./ec2
        run: |
          if [ "${{ steps.action.outputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ steps.action.outputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1

      # ðŸ”¹ Commit PEM file after apply
      - name: Commit PEM file
        if: ${{ steps.action.outputs.action == 'apply' }}
        working-directory: ./ec2
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add keys/*.pem
          git commit -m "Add generated PEM file" || echo "No changes to commit"
          git push origin main

