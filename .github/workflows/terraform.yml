name: Terraform Deploy

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

jobs:
  ##########################
  # VPC Auto
  ##########################
  vpc-auto:
    runs-on: ubuntu-latest
    outputs:
      vpc-changed: ${{ steps.filter.outputs.vpc }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            vpc:
              - 'vpc/**'

  ##########################
  # SG Auto
  ##########################
  sg-auto:
    runs-on: ubuntu-latest
    outputs:
      sg-changed: ${{ steps.filter.outputs.sg }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            sg:
              - 'sg/**'

  ##########################
  # EC2 Auto
  ##########################
  ec2-auto:
    runs-on: ubuntu-latest
    outputs:
      ec2-changed: ${{ steps.filter.outputs.ec2 }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ec2:
              - 'ec2/**'

  ##########################
  # VPC Manual
  ##########################
  vpc-manual:
    runs-on: ubuntu-latest
    needs: vpc-auto
    if: needs.vpc-auto.outputs.vpc-changed == 'true'
    environment: terraform-approval
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        working-directory: ./vpc
        run: terraform init

      - name: Terraform Fmt
        working-directory: ./vpc
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./vpc
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./vpc
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply or Destroy
        working-directory: ./vpc
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1
          fi

  ##########################
  # SG Manual
  ##########################
  sg-manual:
    runs-on: ubuntu-latest
    needs: sg-auto
    if: needs.sg-auto.outputs.sg-changed == 'true'
    environment: terraform-approval
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        working-directory: ./sg
        run: terraform init

      - name: Terraform Fmt
        working-directory: ./sg
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./sg
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./sg
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply or Destroy
        working-directory: ./sg
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1
          fi

  ##########################
  # EC2 Manual
  ##########################
  ec2-manual:
    runs-on: ubuntu-latest
    needs: ec2-auto
    if: needs.ec2-auto.outputs.ec2-changed == 'true'
    environment: terraform-approval
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        working-directory: ./ec2
        run: terraform init

      - name: Terraform Fmt
        working-directory: ./ec2
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./ec2
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./ec2
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply or Destroy
        working-directory: ./ec2
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -input=false -auto-approve -var-file=terraform.tfvars
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve -var-file=terraform.tfvars
          else
            echo "Invalid action"; exit 1
